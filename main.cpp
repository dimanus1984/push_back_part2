#include<iostream>
using namespace std;
//тест
#define tab "\t"

void FillRand(int arr[], const int n);
void Print(int arr[], const int n);

void push_back(int*& arr, int& n, int value);         // Прототип функции добавления значения в конец массива
void push_front(int*& arr, int& n, int value);        // Прототип функции добавления значения в начало массива
void pop_back(int*& arr, int& n);                     // Прототип функции удаления последнего элемента из массива
void pop_front(int*& arr, int& n);                    // Прототип функции удаления элемента из массива по указанному индексу
void insert(int*& arr, int& n, int value, int index); // Прототип функции вставляет значение в массив по указанному индексу
void erase(int*& arr, int& n, int index);             // Прототип функции удаляет элемент из массива по указанному индексу

#define PUSH_BACK
#define PUSH_FRONT
#define POP_BACK
#define POP_FRONT
#define INSERT
#define ERASE

void main()
{
	setlocale(LC_ALL, "Russian");
	int n;
	cout << "Введите размер массива: "; cin >> n;
	int* arr = new int[n] {};

	FillRand(arr, n);
	Print(arr, n);

	int value; // Добавляемое значение
	int index; // Номер элемента
	cout << "Введите добавляемое значение в конец массива: "; cin >> value;
	push_back(arr, n, value);     // Вызываем функцию добавления значения в конец массива
	Print(arr, n);

	cout << "Введите добавляемое значение в начало массива: "; cin >> value;
	push_front(arr, n, value);    // Вызываем функцию добавления значения в начало массива
	Print(arr, n);

	cout << "Удаление последнего элемента в массиве: " << endl;
	pop_back(arr, n);             // Вызываем функцию удаления последнего элемента из массива
	Print(arr, n);

	cout << "Удаление нулевого элемента в массиве: " << endl;
	pop_front(arr, n);            // Вызываем функцию удаления элемента из массива по указанному индексу
	Print(arr, n);

	cout << "Введите добавляемое значение: "; cin >> value;
	cout << "Введите номер элемента для добавления значения: "; cin >> index;
	insert(arr, n, value, index); // Вызываем функцию добавления значения в массив по указанному индексу
	Print(arr, n);

	cout << "Введите номер элемента для удаления значения: "; cin >> index;
	erase(arr, n, index);        // Вызываем функцию удаления значения в массиве по указанному индексу
	Print(arr, n);
	delete[] arr;
}
void FillRand(int arr[], const int n)
{
	for (int i = 0; i < n; i++)
	{
		arr[i] = rand() % 100;
	}
}
void Print(int arr[], const int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << tab;
		//cout << *(arr + i) << tab;
	}
	cout << endl;
}
//-------------------------------------------------------------------------------------

//Код добавления значения в конец массива в отдельной функции push_back();
#ifdef PUSH_BACK
void push_back(int*& arr, int& n, int value)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[n + 1]{};
	//2) Копируем все значения из исходного массива в буферный
	for (int i = 0; i < n; i++)
	{
		buffer[i] = arr[i]; // Копируем элементы СООТВЕТСТВЕННО
	}
	//3) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//4) Подменяем адрес в указателе на исходный массив
	arr = buffer;
	//5) И только после всего этого можно записать новое значение в конец массива
	arr[n] = value;
	n++;
}
#endif // PUSH_BACK

//-------------------------------------------------------------------------------------

//Код добавления значения в начало массива в отдельной функции push_front();
#ifdef PUSH_FRONT
void push_front(int*& arr, int& n, int value)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[n + 1]{};
	//2) Копируем все значения из исходного массива в буферный
	for (int i = 0; i < n; i++)
	{
		buffer[i + 1] = arr[i]; // Копируем элементы СО СМЕЩЕНИЕМ НА ОДИН ЭЛЕМЕНТ ВПРАВО
	}
	//3) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//4) Подменяем адрес в указателе на исходный массив
	arr = buffer;
	//5) И только после всего этого можно записать новое значение в начало массива
	arr[0] = value;
	n++; // Прибавить
}
#endif // PUSH_FRONT

//-------------------------------------------------------------------------------------

//Удаляет последний элемент из массива в отдельной функции pop_back();
#ifdef POP_BACK
void pop_back(int*& arr, int& n)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[--n]{};
	// Для того чтобы удалить элемент из массива,
	// в буфферный массив нужно скопировать все элементы кроме удаляемого:
	//2) Копируем все значения из исходного массива в буферный на 1 элемент меньше
	for (int i = 0; i < n; i++)
	{
		buffer[i] = arr[i];
	}
	//3) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//4) Подменяем адрес в указателе на исходный массив
	arr = buffer;
	//5) И только после всего этого можно удалить мусор в конце массива
}
#endif // POP_BACK

//-------------------------------------------------------------------------------------

//Удаляет нулевой элемент из массива в отдельной функции pop_front();
#ifdef POP_FRONT
void pop_front(int*& arr, int& n)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[--n]{};
	//2) Копируем все значения из исходного массива в буферный на 1 элемент меньше
	for (int i = 0; i < n; i++)
	{
		buffer[i] = arr[i + 1];
	}
	//3) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//4) Подменяем адрес в указателе на исходный массив
	arr = buffer;
	//2) Удаляем копию последнего элемента
}
#endif // POP_FRONT

//-------------------------------------------------------------------------------------

//Код добавления значения в массив по указанному индексу в отдельной функции insert();
#ifdef INSERT
void insert(int*& arr, int& n, int value, int index)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[++n]{};
	//2) Копируем все значения из исходного массива в буферный до index
	for (int i = 0; i < index; i++)
	{
		buffer[i] = arr[i];
	}
	buffer[index] = value;
	//3) Копируем все значения из исходного массива в буферный после index
	for (int i = index; i < n - 1; i++)
	{
		buffer[i + 1] = arr[i];
	}
	//4) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//5) Подменяем адрес в указателе на исходный массив
	arr = buffer;
}
#endif // INSERT

//-------------------------------------------------------------------------------------

//Код удаления значения в массиве по указанному индексу в отдельной функции insert();
#ifdef ERASE
void erase(int*& arr, int& n, int index)
{
	//1) Создаем буферный массив нужного размера
	int* buffer = new int[--n]{};
	//2) Копируем все значения из исходного массива в буферный до index
	for (int i = 0; i < index; i++)
	{
		buffer[i] = arr[i];
	}
	//3) Копируем все значения из исходного массива в буферный после index
	for (int i = index; i < n; i++)
	{
		buffer[i] = arr[i + 1];
	}
	//4) После того как данные скопированы, исходный массив можно удалить
	delete[] arr;
	//5) Подменяем адрес в указателе на исходный массив
	arr = buffer;
}
#endif // ERASE

//-------------------------------------------------------------------------------------